<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd">

<!--
       
    Cache configuration
    ===================
 
    The following attributes are required.
 
    name:
    Sets the name of the cache. This is used to identify the cache. It must be unique.
 
    maxEntriesLocalHeap:
    Sets the maximum number of objects that will be held on heap memory.  0 = no limit.
 
    maxEntriesLocalDisk:
    Sets the maximum number of objects that will be maintained in the DiskStore
    The default value is zero, meaning unlimited.
 
    eternal:
    Sets whether elements are eternal. If eternal,  timeouts are ignored and the
    element is never expired.
 
    The following attributes and elements are optional.
 
    maxEntriesInCache:
    This feature is applicable only to Terracotta distributed caches.
    Sets the maximum number of entries that can be stored in the cluster. 0 = no limit.
    Note that clustered cache will still perform eviction if resource usage requires it.
    This property can be modified dynamically while the cache is operating.
 
    overflowToOffHeap:
    (boolean) This feature is available only in enterprise versions of Ehcache.
    When set to true, enables the cache to utilize off-heap memory
    storage to improve performance. Off-heap memory is not subject to Java
    GC. The default value is false.
 
    maxBytesLocalHeap:
    Defines how many bytes the cache may use from the VM's heap. If a CacheManager
    maxBytesLocalHeap has been defined, this Cache's specified amount will be
    subtracted from the CacheManager. Other caches will share the remainder.
    This attribute's values are given as <number>k|K|m|M|g|G for
    kilobytes (k|K), megabytes (m|M), or gigabytes (g|G).
    For example, maxBytesLocalHeap="2g" allots 2 gigabytes of heap memory.
    If you specify a maxBytesLocalHeap, you can't use the maxEntriesLocalHeap attribute.
    maxEntriesLocalHeap can't be used if a CacheManager maxBytesLocalHeap is set.
 
    Elements put into the cache will be measured in size using net.sf.ehcache.pool.sizeof.SizeOf
    If you wish to ignore some part of the object graph, see net.sf.ehcache.pool.sizeof.annotations.IgnoreSizeOf
 
    maxBytesLocalOffHeap:
    This feature is available only in enterprise versions of Ehcache.
    Sets the amount of off-heap memory this cache can use, and will reserve.
 
    This setting will set overflowToOffHeap to true. Set explicitly to false to disable overflow behavior.
 
    Note that it is recommended to set maxEntriesLocalHeap to at least 100 elements
    when using an off-heap store, otherwise performance will be seriously degraded,
    and a warning will be logged.
 
    The minimum amount that can be allocated is 128MB. There is no maximum.
 
    maxBytesLocalDisk:
    As for maxBytesLocalHeap, but specifies the limit of disk storage this cache will ever use.
 
    timeToIdleSeconds:
    Sets the time to idle for an element before it expires.
    i.e. The maximum amount of time between accesses before an element expires
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that an Element can idle for infinity.
    The default value is 0.
 
    timeToLiveSeconds:
    Sets the time to live for an element before it expires.
    i.e. The maximum time between creation time and when an element expires.
    Is only used if the element is not eternal.
    Optional attribute. A value of 0 means that and Element can live for infinity.
    The default value is 0.
 
    diskExpiryThreadIntervalSeconds:
    The number of seconds between runs of the disk expiry thread. The default value
    is 120 seconds.
 
    diskSpoolBufferSizeMB:
    This is the size to allocate the DiskStore for a spool buffer. Writes are made
    to this area and then asynchronously written to disk. The default size is 30MB.
    Each spool buffer is used only by its cache. If you get OutOfMemory errors consider
    lowering this value. To improve DiskStore performance consider increasing it. Trace level
    logging in the DiskStore will show if put back ups are occurring.
 
    clearOnFlush:
    whether the MemoryStore should be cleared when flush() is called on the cache.
    By default, this is true i.e. the MemoryStore is cleared.
 
    memoryStoreEvictionPolicy:
    Policy would be enforced upon reaching the maxEntriesLocalHeap limit. Default
    policy is Least Recently Used (specified as LRU). Other policies available -
    First In First Out (specified as FIFO) and Less Frequently Used
    (specified as LFU)
 
    copyOnRead:
    Whether an Element is copied when being read from a cache.
    By default this is false.
 
    copyOnWrite:
    Whether an Element is copied when being added to the cache.
    By default this is false.
 
    Cache persistence is configured through the persistence sub-element.  The attributes of the
    persistence element are:
 
    strategy:
    Configures the type of persistence provided by the configured cache.  This must be one of the
    following values:
 
    * localRestartable - Enables the RestartStore and copies all cache entries (on-heap and/or off-heap)
    to disk. This option provides fast restartability with fault tolerant cache persistence on disk.
    It is available for Enterprise Ehcache users only.
 
    * localTempSwap - Swaps cache entries (on-heap and/or off-heap) to disk when the cache is full.
    "localTempSwap" is not persistent.
 
    * none - Does not persist cache entries.
 
    * distributed - Defers to the <terracotta> configuration for persistence settings. This option
    is not applicable for standalone.
 
    synchronousWrites:
    When set to true write operations on the cache do not return until after the operations data has been
    successfully flushed to the disk storage.  This option is only valid when used with the "localRestartable"
    strategy, and defaults to false.
 
    The following example configuration shows a cache configured for localTempSwap restartability.
 
    <cache name="persistentCache" maxEntriesLocalHeap="1000">
        <persistence strategy="localTempSwap"/>
    </cache>
 
    Cache elements can also contain sub elements which take the same format of a factory class
    and properties. Defined sub-elements are:
 
    * cacheEventListenerFactory - Enables registration of listeners for cache events, such as
      put, remove, update, and expire.
 
    * bootstrapCacheLoaderFactory - Specifies a BootstrapCacheLoader, which is called by a
      cache on initialisation to prepopulate itself.
 
    * cacheExtensionFactory - Specifies a CacheExtension, a generic mechanism to tie a class
      which holds a reference to a cache to the cache lifecycle.
 
    * cacheExceptionHandlerFactory - Specifies a CacheExceptionHandler, which is called when
      cache exceptions occur.
 
    * cacheLoaderFactory - Specifies a CacheLoader, which can be used both asynchronously and
      synchronously to load objects into a cache. More than one cacheLoaderFactory element
      can be added, in which case the loaders form a chain which are executed in order. If a
      loader returns null, the next in chain is called.
 
    * copyStrategy - Specifies a fully qualified class which implements
      net.sf.ehcache.store.compound.CopyStrategy. This strategy will be used for copyOnRead
      and copyOnWrite in place of the default which is serialization.                -->

	<defaultCache maxEntriesLocalHeap="50" eternal="false"
		overflowToDisk="false" diskPersistent="false" timeToIdleSeconds="0"
		timeToLiveSeconds="60" memoryStoreEvictionPolicy="LFU" />

	<cache name="users" maxEntriesLocalHeap="100" eternal="false"
		overflowToDisk="false" diskPersistent="false" timeToIdleSeconds="0"
		timeToLiveSeconds="60" memoryStoreEvictionPolicy="LRU" />

</ehcache>